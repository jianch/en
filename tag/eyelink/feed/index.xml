<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Eyelink &#8211; Dr Jian Chen</title>
	<atom:link href="http://localhost/wordpress/tag/eyelink/feed/" rel="self" type="application/rss+xml" />
	<link>http://jianch.github.io/jianch.github.io</link>
	<description></description>
	<lastBuildDate>Wed, 10 Feb 2021 03:43:15 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6.1</generator>

<image>
	<url>http://jianch.github.io/jianch.github.io/wp-content/uploads/2021/02/cropped-Frued_Cartoon-32x32.jpg</url>
	<title>Eyelink &#8211; Dr Jian Chen</title>
	<link>http://jianch.github.io/jianch.github.io</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Plot Heatmap from Eye Tracking Data</title>
		<link>http://jianch.github.io/jianch.github.io/plot-heatmap-from-eye-tracking-data/</link>
					<comments>http://jianch.github.io/jianch.github.io/plot-heatmap-from-eye-tracking-data/#respond</comments>
		
		<dc:creator><![CDATA[saturn]]></dc:creator>
		<pubDate>Thu, 07 Sep 2017 03:42:50 +0000</pubDate>
				<category><![CDATA[Research]]></category>
		<category><![CDATA[Eyelink]]></category>
		<category><![CDATA[Eyetracking]]></category>
		<guid isPermaLink="false">http://jianch.github.io/jianch.github.io/?p=130</guid>

					<description><![CDATA[There are many ways/toolbox to plot a heat map from eye tracking data. but I prefer DIY Here is the source code:]]></description>
										<content:encoded><![CDATA[
<p>There are many ways/toolbox to plot a heat map from eye tracking data. but I prefer DIY</p>



<hr class="wp-block-separator"/>



<p>Here is the source code:</p>



<pre class="wp-block-code"><code>%% Data Structure Explanation
% Explanation from Eyelink Programers Guide 3.0

%--------------------------------------------------------
% dataEyelink =
%
%       samples: &#91;401341x4 double]()
%     fixations: &#91;3965x6 double]()
%      saccades: &#91;3964x9 double]()
%        blinks: &#91;1720x3 double]()
%      triggers: &#91;1080x3 double]()

%--------------------------------------------------------
% dataEyelink.samples
%       column1         column2         column3     column4
%       timepoint       x               y           pupil size
%--------------------------------------------------------
% dataEyelink.fixations
%       column1         column2         column3     column4 column5 column6
%       tmepoint_start  timepoint_end   duration    x       y       avg pupil size
%--------------------------------------------------------
% dataEyelink.saccades
%       column1         column2         column3     column4 column5 column6
%       tmepoint_start  timepoint_end   duration    x_from  y_from  x_to
%       column7         column8         column9
%       y_to            amplitude       peak velocity
%                       in degrees      degr/sec
%--------------------------------------------------------
% dataEyelink.blinks
%       column1         column2         column3
%       tmepoint_start  timepoint_end   duration
%--------------------------------------------------------
% dataEyelink.triggers
%       column1         column2         column3
%       tmepoint        1=SYNCON        Trial(I also wrote trial number)
%                       0=SYNCOFF
%--------------------------------------------------------



clear;
load xxxxEyelink.mat

%% variables
gaussSigma = 0.05;
posX = round(dataEyelink.fixations(:,4));
posY = round(dataEyelink.fixations(:,5));
gazeDuration = dataEyelink.fixations(:,3) / max(dataEyelink.fixations(:,3)); % rescale to 0-1

%% generating data for heatmap
gazedata = &#91;posX/1024, posY/768](); % rescale to 0-1
gazedata = gazedata((gazedata(:, 1))\>0, :); % remove possible negative value...

%% make gaussians
figure;
&#91;X,Y]() = meshgrid(0:0.001:1, 0:0.001:1);
z = zeros(size(X,1),size(X,2));

for i = 1:length(gazedata)
z = z + gazeDuration(i) * exp(-( ((X - gazedata(i,1)).^2 ./ (2*gaussSigma^2)) + ((Y - gazedata(i,2)).^2 ./ (2*gaussSigma^2)) ) );
end

mesh(X,Y,z); % plot the heatmap
colorbar;
caxis(&#91;0,300]());
view(0,90);


print('heatmap', '-dtiff','-r300');</code></pre>
]]></content:encoded>
					
					<wfw:commentRss>http://jianch.github.io/jianch.github.io/plot-heatmap-from-eye-tracking-data/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Get real-time gaze positions from the eye tracke</title>
		<link>http://jianch.github.io/jianch.github.io/get-real-time-gaze-positions-from-the-eye-tracke/</link>
					<comments>http://jianch.github.io/jianch.github.io/get-real-time-gaze-positions-from-the-eye-tracke/#respond</comments>
		
		<dc:creator><![CDATA[saturn]]></dc:creator>
		<pubDate>Tue, 30 May 2017 03:39:11 +0000</pubDate>
				<category><![CDATA[Research]]></category>
		<category><![CDATA[Eyelink]]></category>
		<category><![CDATA[gaze]]></category>
		<guid isPermaLink="false">http://jianch.github.io/jianch.github.io/?p=126</guid>

					<description><![CDATA[If I want to make sure the participants are fixating on the cross before starting each trial, how should I do? With the help of Eyetracker (Eyelink in this case), we can get the realtime gaze position and therefore we can monitor the gaze position to make sure it falls into a certain area before...]]></description>
										<content:encoded><![CDATA[
<p>If I want to make sure the participants are fixating on the cross before starting each trial, how should I do?</p>



<p>With the help of Eyetracker (Eyelink in this case), we can get the realtime gaze position and therefore we can monitor the gaze position to make sure it falls into a certain area before the participants start the trial.</p>



<hr class="wp-block-separator"/>



<pre class="wp-block-code"><code>% make sure participants are fixating on the central
while isEyeLink  % if Eyelink was connected
status = Eyelink('newfloatsampleavailable');  % check to see if everything is fine in Eyelink
if status /=0; % if all is fine
evt = Eyelink('newestfloatsample'); % get the newest float sample from Eyelink
realtime.x = evt.gx(1);  % get the x axis of gaze
realtime.y = evt.gy(1);  % get the y axis of gaze
end;

if abs(realtime.x-512)\&lt;=50&amp;abs(realtime.y-384)\&lt;=50  % if the gaze falls into  a 50\*50 pixel square around the cross
break; % jump out the loop and start the trial
end
end</code></pre>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>http://jianch.github.io/jianch.github.io/get-real-time-gaze-positions-from-the-eye-tracke/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Load Eyelink data into R (in a very fast way)</title>
		<link>http://jianch.github.io/jianch.github.io/load-eyelink-data-into-r-in-a-very-fast-way/</link>
					<comments>http://jianch.github.io/jianch.github.io/load-eyelink-data-into-r-in-a-very-fast-way/#respond</comments>
		
		<dc:creator><![CDATA[saturn]]></dc:creator>
		<pubDate>Tue, 17 Jan 2017 03:33:52 +0000</pubDate>
				<category><![CDATA[Research]]></category>
		<category><![CDATA[asc]]></category>
		<category><![CDATA[edf]]></category>
		<category><![CDATA[Eyelink]]></category>
		<category><![CDATA[Eyetracking]]></category>
		<guid isPermaLink="false">http://jianch.github.io/jianch.github.io/?p=120</guid>

					<description><![CDATA[These scripts are adapted from Dr. Jason Forte’s work in our lab. R]]></description>
										<content:encoded><![CDATA[
<p>These scripts are adapted from Dr. Jason Forte’s work in our lab.</p>



<p></p>



<p>R</p>



<pre class="wp-block-code"><code>## eyelink data analysis 
setwd('/Users/JianChen/Dropbox/PhD/Exp1/')
filenameASC = 'xxxxxx.asc'
dataEyelink
# extract all numeric lines &amp;amp; replace blink (.) with 0.0\. Hack: sed
# ''s/\.//g'' gets rid of all decimal points. We correct for that in the line dataEyelink$samples$V2 &amp;amp; V3
# system command in this case = sed -n '/^\&#91;0-9]/p' PH12J17a.asc | sed 's/ \./0.0/g' | sed 's/\.//g' &amp;gt; tmp.txt
system(paste("sed -n '/^\&#91;0-9]/p'", filenameASC, " | sed 's/\\./0.0/g' "," | sed 's/\\.//g' &amp;gt; tmp.txt"))
# read samples into data structure
dataEyelink$samples &amp;lt;- read.table('tmp.txt')
# correct for above hack to resote pixel values....
dataEyelink$samples$V2 &amp;lt;- dataEyelink$samples$V2 / 10
dataEyelink$samples$V3 &amp;lt;- dataEyelink$samples$V3 / 10
# extract gaze event for "EFIX" &amp;amp; remove "EFIX R" (Here I tracked right eye)
system(paste("sed -n -e '/^EFIX/p' ", filenameASC, " | sed 's/EFIX R //g' &amp;gt; tmp.txt"))
# read fixations into data structure
dataEyelink$fixations &amp;lt;- read.table('tmp.txt')

# extract gaze event for "ESACC" &amp;amp; remove "ESACC R"
system(paste("sed -n -e '/^ESACC/p' ", filenameASC, " | sed 's/ESACC R //g' &amp;gt; tmp.txt"))
# read saccades into data structure
dataEyelink$saccades &amp;lt;- read.table('tmp.txt')

# extract gaze event for "EBLINK" &amp;amp; remove "EBLINK R"
system(paste("sed -n -e '/^EBLINK/p' ", filenameASC," | sed 's/EBLINK R //g' &amp;gt; tmp.txt"))
# read blinks into data structure
dataEyelink$blinks &amp;lt;- read.table('tmp.txt')

# extract trigger event for "SYNCTIMEON" &amp;amp; "SYNCTIMEOFF" convert "SYNCTIMEON" to 1 &amp;amp; "SYNCTIMEOFF" to 0 and remove MSG
system(paste("sed -n -e '/SYNCTIMEON/p' -e '/SYNCTIMEOFF/p' ", filenameASC, " | sed 's/SYNCTIMEON/1/g' | sed 's/SYNCTIMEOFF/0/g' | sed 's/MSG //g' &amp;gt; tmp.txt"))
# read triggers into data structure
dataEyelink$triggers &amp;lt;- read.table('tmp.txt')

system('rm tmp.txt')</code></pre>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>http://jianch.github.io/jianch.github.io/load-eyelink-data-into-r-in-a-very-fast-way/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
